<!-- hidden value to reset datatable state save -->
<span id="removeDatatablesStateSave" class="d-none">@ViewBag.RemoveDatatablesStateSave</span>

<!--================================================================================================================================================================
FILTERING
=================================================================================================================================================================-->

<input type="hidden" id="FILTER_Keyword" name="FILTER_Keyword" value="@ViewBag.FILTER_Keyword" />
<input type="hidden" id="FILTER_Active" name="FILTER_Active" value="@ViewBag.FILTER_Active" />
<input type="hidden" id="FILTER_Languages_Id" name="FILTER_Active" value="@ViewBag.FILTER_Languages_Id" />
<input type="hidden" id="FILTER_LessonTypes_Id" name="FILTER_Active" value="@ViewBag.FILTER_LessonTypes_Id" />

<script type="text/javascript">

    $(document).ready(function () {
        if ('@ViewBag.FILTER_Keyword' != null)
            $('#FILTER_Keyword').val('@ViewBag.FILTER_Keyword');
        if ('@ViewBag.FILTER_Active' != null)
            $('#FILTER_Active').val('@ViewBag.FILTER_Active');
        if ('@ViewBag.FILTER_Status' != null)
            $('#FILTER_Status').val('@ViewBag.FILTER_Status');
        if ('@ViewBag.FILTER_Languages_Id' != null)
            $('#FILTER_Languages_Id').val('@ViewBag.FILTER_Languages_Id');
        if ('@ViewBag.FILTER_LessonTypes_Id' != null)
            $('#FILTER_LessonTypes_Id').val('@ViewBag.FILTER_LessonTypes_Id');
    });

    function getAllFilter() { return getFilter(null, null, null, null); }
    function getFilter(FILTER_Keyword, FILTER_Active, FILTER_Languages_Id, FILTER_LessonTypes_Id) {
        var filter = $('#FILTER_Keyword').val();

        if ($('#FILTER_Active') != null)
            FILTER_Active = $('#FILTER_Active').val();
        filter += appendFilter(FILTER_Active, "FILTER_Active");

        if ($('#FILTER_Languages_Id') != null)
            FILTER_Languages_Id = $('#FILTER_Languages_Id').val();
        filter += appendFilter(FILTER_Languages_Id, "FILTER_Languages_Id");

        if ($('#FILTER_LessonTypes_Id') != null)
            FILTER_LessonTypes_Id = $('#FILTER_LessonTypes_Id').val();
        filter += appendFilter(FILTER_LessonTypes_Id, "FILTER_LessonTypes_Id");

        return filter;
    }

    function Action(action, controller) {
        var url = '@Url.Action("__action", "__controller", new { FILTER_Keyword = "__data" })';
        url = url.replace("__action", action).replace("__controller", controller);
        url = url.replace("__data", getAllFilter());
        OpenWindow(url, "false");
    }

    function ActionWithId(id, action, controller) {
        var url = '@Url.Action("__action", "__controller", new { id = "__data" })';
        url = url.replace("__action", action).replace("__controller", controller);
        url = url.replace("__data", id + "?FILTER_Keyword=" + getAllFilter());
        OpenWindow(url, "false");
    }

    function appendFilter(value, filterName) {
        if (value != null && value.toString() != "") {
            if (filterName == "")
                return value;
            else
                return "&" + filterName + "=" + value;
        }
        return "";
    }

    function appendFilterIfNumber(value, filterName) {
        if (isNaN(value) == true)
            return ""
        else
            return appendFilter(value, filterName);
    }

    function getDatatableSearch() {
        if ((search == null || search == "") && $('input[aria-controls=DataTables_Table_0]').val() != undefined)
            return $('input[aria-controls=DataTables_Table_0]').val();
        else
            return "";
    }

    function setDatatableSearch(search) {
        if ($('input[aria-controls=DataTables_Table_0]').val() != undefined)
            $('input[aria-controls=DataTables_Table_0]').val(search).keyup();
    }

</script>

<!--================================================================================================================================================================
OTHER
=================================================================================================================================================================-->
<script type="text/javascript">

    // TEXTBOX =====================================================================================================================================================

    function ZeroIfEmpty(value) { return setIfEmpty(value, 0); }
    function setIfEmpty(value, defaultValue) {
        if (value == '')
            return defaultValue;
        else
            return value;
    }

    function applyEventsToInputTextboxes() {
        //45 = minus sign
        //46 = dot sign
        //48-57 = 0-9

        $('.numericonly').bind('keypress', function (e) {
            return event.charCode == 45 || event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57);
        });

        $('.positivenumericonly').bind('keypress', function (e) {
            return event.charCode == 46 || (event.charCode >= 48 && event.charCode <= 57);
        });

        $('.integeronly').bind('keypress', function (e) {
            return event.charCode == 45 || (event.charCode >= 48 && event.charCode <= 57);
        });

        $('.positiveintegeronly').bind('keypress', function (e) {
            return (event.charCode >= 48 && event.charCode <= 57);
        });

        //allow editing text after initial select all on focus
        $('input').on('focus', function (e) {
            $(this)
                .one('mouseup', function () {
                    $(this).select();
                    return false;
                })
                .select();
        });
    }

    // DROPDOWNLIST ================================================================================================================================================

    function getMonthDropDownValue(start, change) {
        var startingMonth = parseInt(start);
        var changeMonth = parseInt(change);
        var newMonth = startingMonth + changeMonth;
        if (newMonth > 12) {
            newMonth -= 12;
        }
        else if (newMonth == 0) {
            newMonth += 12;
        }
        return newMonth;
    }

    function MonthsDropdownChange(id, action) {
        if (action == '@EnumActions.Previous.ToString()') {
            DropdownChange(id, getMonthDropDownValue($('#'+id).val(), -1));
        } else {
            DropdownChange(id, getMonthDropDownValue($('#'+id).val(), 1));
        }
    }

    function DropdownChange(id, value) {
        $('#'+id).val(value).trigger('change');
    }

    // NAVIGATION MENU =============================================================================================================================================

    function activateNavigationMenu() {
        $('#Menu_@ViewBag.SelectedNavigationMenu').addClass('active');
    }

    // BOOTBOX =====================================================================================================================================================

    function showBootboxMessage() {
        var msg = '@TempData["BootboxMessage"]';
        if (msg !== '') {
            msg = msg.replaceAll("&lt;", "<").replaceAll("&gt;", ">");
            bootbox.alert({ backdrop: true, message: msg });
        }
    }

    // CALENDAR ====================================================================================================================================================

    $('.daterange-picker').daterangepicker({ singleDatePicker: true, locale: { format: 'YYYY/MM/DD' } });

    function setDateRangePicker(id, value) {
        $('#' + id).data('daterangepicker').setStartDate(value);
        $('#' + id).data('daterangepicker').setEndDate(value);
    }

    // DATE MANIPULATOR ============================================================================================================================================

    function parseJSONDate(value) {
        return new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10));
        //return new Date(parseInt((value).match(/\d+/)[0])); //returns incorrect date when json date value is negative. (negative when earlier than year 1970)
    }

    var monthNames = ["Jan", "Feb", "Mar", "Apr",
        "May", "Jun", "Jul", "Aug",
        "Sep", "Oct", "Nov", "Dec"];

    function formatDate(value, format) {
        var result = [];
        var date = "";
        var month = "";
        var year = "";

        var delimiter = getDateDelimiter(format);

        format = format.split(delimiter);
        for (i = 0; i < format.length; i++) {

            if (format[i] == 'dd') {
                result.push((('' + value.getDate()).length < 2 ? '0' : '') + value.getDate() + ' ');
            }

            if (format[i].includes('M')) {
                if (format[i] == 'MMM') {
                    month = monthNames[value.getMonth()];
                } else if (format[i] == 'MM') {
                    month = (('' + value.getMonth()).length < 2 ? '0' : '') + value.getMonth() + ' ';
                }
                result.push(month);
            }

            if (format[i] == 'yyyy')
                result.push(value.getFullYear());
        }


        return result.filter(Boolean).join(delimiter);
    }

    function getDateDelimiter(value) {
        if (value.split(" ").length > 1)
            return " ";
        else if (value.split("-").length > 1)
            return "-";
        else if (value.split("/").length > 1)
            return "/";
    }

    // STRING MANIPULATOR ==========================================================================================================================================

    function appendChange(originalText, oldValue, newValue, pretext) {
        if (oldValue != newValue)
            return append(originalText, pretext + "'" + oldValue + "' => '" + newValue + "'");
        else
            return originalText;
    }

    function append(originalText, newValue) {
        if (originalText == "" && newValue != "")
            return newValue;
        else if (newValue == "")
            return originalText;
        else {
            if (originalText != "")
                originalText += " <BR>";
            return originalText += newValue;
        }
    }

    function appendWithDelimiter(originalText, newValue, delimiter) {
        if (originalText == "" && newValue != "")
            return newValue;
        else if (newValue == "")
            return originalText;
        else {
            if (originalText != "")
                originalText += delimiter;
            return originalText += newValue;
        }
    }

    // ACTIVITY LOGS ===============================================================================================================================================

    function Log(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetLog", "ActivityLogs")',
            data: {
                ReffId: id
            },
            success: function (data) {
                var dialog = bootbox.alert({
                    title: 'Log',
                    size: 'large',
                    message: data.content,
                    backdrop: true
                }).off("shown.bs.modal"); //scroll to top
            }, //end success
            error: function (result) {
                bootbox.alert({ backdrop: true, message: "Error " + result });
            } //end error
        }); //end ajax
    }

    // DATATABLES PLUGIN ===========================================================================================================================================

    var datatable = $('.datatable').DataTable({
        autoWidth: false,
        pagingType: 'full_numbers',
        order: [[0, 'asc']],
        bStateSave: true,
        stateSaveCallback: function (settings, data) {
            localStorage.setItem('DataTables_' + settings.sInstance, JSON.stringify(data))
        },
        stateLoadCallback: function (settings) {
            return JSON.parse(localStorage.getItem('DataTables_' + settings.sInstance))
        },
        stateLoadParams: function (settings, data) {
            if ($("#removeDatatablesStateSave").text() == "1") {
                data.search.search = "";
                data.start = 0;
            }
        },
        columnDefs: [
            { searchable: false, targets: "non-searchable" },
            { orderable: false, targets: "non-sortable" }
        ],
        dom: '<"datatable-header"flp>' +
            '<"datatable-scroll"t>' +
            '<"datatable-footer"ilp>',
        language: {
            emptyTable: "Gunakan filter dan tekan tombol LOAD untuk menampilkan data",
            search: '<span>Filter:</span> _INPUT_',
            searchPlaceholder: 'enter keyword',
            lengthMenu: '<span>Rows:</span> _MENU_',
            paginate: {
                'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;'
            }
        }
    });

    function getSearch() {
        if ((search == null || search == "") && $('input[aria-controls=DataTables_Table_0]').val() != undefined)
            return $('input[aria-controls=DataTables_Table_0]').val();
        else
            return "";
    }

    function setSearch(search) {
        if ($('input[aria-controls=DataTables_Table_0]').val() != undefined)
            $('input[aria-controls=DataTables_Table_0]').val(search).keyup();
    }

    // MOUSE EVENTS ================================================================================================================================================

    //disable scrollwheel mouse on input type number
    $(document).on("wheel", "input[type=number]", function (e) {
        $(this).blur();
    });

    //==============================================================================================================================================================

    $(document).ready(function () {
        setNavigationMenuVisibility();

        $("input").attr("autocomplete", "off"); //turn off autocomplete
        $('.form-input-styled').uniform(); //??
        $('.select2').select2(); //apply filtering on dropdownlists
        $('form:not(.filter) :input:visible:enabled:first').select(); //select content of first control

        //on-off switch
        if (document.querySelector('.form-check-input-switchery') != null) {
            var elems = Array.prototype.slice.call(document.querySelectorAll('.form-check-input-switchery'));
            elems.forEach(function (html) {
                var switchery = new Switchery(html);
            });
        }

        $('.notesbutton').click(function (event) {
            var id = '#' + event.target.id;
            $(id + '_Div').addClass('d-none');
            $(id + '_Edit').removeClass('d-none');
            $(id + '_Notes').select();
        });

        $('.showPassword').mousedown(function () {
            $('.passwordTextbox').attr('type', 'text');
        }).mouseup(function () {
            $('.passwordTextbox').attr('type', 'password');
        }).mouseout(function () {
            $('.passwordTextbox').attr('type', 'password');
        });

        applyEventsToInputTextboxes(); //call here so it is executed initially
        activateNavigationMenu();

        showBootboxMessage();
    });

    function setNavigationMenuVisibility() {
        $('#navbar-navigation').children('ul:first').children('li').each(function (index) { //main menu
            var subMenu = $(this).children('div:first').children('div.dropdown-submenu'); //sub menu lvl 1

            recursivelySetSubmenuVisibility(subMenu);

            //hide main menu if has no children
            subMenu = $(this).children('div:first').children('div.dropdown-submenu');
            var notlabels = $(this).children('a:not(.dropdown-toggle)');
            var label = $(this).children('a.dropdown-toggle');
            var links = $(this).children('div:first').children('a');
            if (subMenu.length == 0 && ((notlabels.length == 0 && links.length == 0) || label == 1)) {
                $(this).remove();
            }
        });
    }

    function recursivelySetSubmenuVisibility(subMenu) {
        if (subMenu.length == 0) {
            return; //exit recursion
        } else {
            subMenu.each(function () {
                var nextSubMenu = $(this).children('div:first').children('div.dropdown-submenu');
                recursivelySetSubmenuVisibility(nextSubMenu);

                nextSubMenu = $(this).children('div:first').children('div.dropdown-submenu');
                var label = $(this).children('a.dropdown-toggle');
                var links = $(this).children('div:first').children('a');
                if (nextSubMenu.length == 0 && (links.length == 0 || label == 1))
                    $(this).remove();
            });
        }
    }

    function ScrollTo(id,duration) {
        $('html, body').animate({
            scrollTop: $('#' + id).offset().top
        }, duration);
    }

    function OpenWindow(url, opennewwindow) {
        if (opennewwindow == "true")
            window.open(url, '_blank');
        else
            window.location.href = url;
    }

</script>