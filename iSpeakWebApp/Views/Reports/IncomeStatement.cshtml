@model IEnumerable<iSpeakWebApp.Models.IncomeStatementModel>

@{
    iSpeakWebApp.Models.UserAccountRolesModel access = iSpeakWebApp.Controllers.UserAccountsController.getUserAccess(Session);
    string ControllerName = "Reports";
    ViewBag.SelectedNavigationMenu = "Internal";
    ViewBag.Title = "INCOME STATEMENT";
    ViewBag.Subtitle = "INCOME STATEMENT";
}

<div class="content-wrapper">
    <!-- Content area -->
    <div class="content">
        @using (Html.BeginForm("IncomeStatement", ControllerName, FormMethod.Post))
        {
            <!-- Form inputs -->
            <div class="card animated bounceInLeft">
                <div class="card-header header-elements-inline pb-1">
                    <h5 class="card-title text-uppercase">@ViewBag.Title</h5>
                    <i class="icon-info22 text-primary ml-2 d-none" data-container="body" data-toggle="popover" data-placement="left" data-content="hidden"></i>
                </div>
                <div class="card-body">

                    <div class="row mx-0">

                        <div class="row ml-0 mr-2" style="width:150px;">
                            <label class="mb-0">From</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @Html.CheckBox("FILTER_chkDateFrom", true, new { @class = "form-check-input check-styled", @checked = "checked" })
                                    </div>
                                </div>
                                @Html.Editor("FILTER_DateFrom", new { htmlAttributes = new { @class = "form-control daterange-picker", @checked = "checked" } })
                            </div>
                        </div>

                        <div class="row ml-0 mr-2" style="width:150px;">
                            <label class="mb-0">To</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        @Html.CheckBox("FILTER_chkDateTo", true, new { @class = "form-check-input check-styled" })
                                    </div>
                                </div>
                                @Html.Editor("FILTER_DateTo", new { htmlAttributes = new { @class = "form-control daterange-picker" } })
                            </div>
                        </div>

                        <div class="ml-0 mr-2">
                            <label class="mb-0">&nbsp;</label>
                            <button type="submit" id="LoadData" onclick="showLoadingSpinner()" class="btn btn-outline-primary form-control"><i class="icon-reload-alt mr-2"></i>LOAD</button>
                        </div>

                    </div>

                    <div class="mt-2">
                        <label class="h1 mb-0">Revenue</label>
                        <canvas id="myChart"></canvas>
                    </div>

                    <div class="mt-2 table-responsive topOfDataTable">
                        <table class="table table-hover datatable">
                            <thead>
                                <tr>
                                    <th style="width:100px;">@Html.DisplayNameFor(model => model.MonthYear)</th>
                                    <th class="text-right" style="width:100px;">@Html.DisplayNameFor(model => model.Revenues)</th>
                                    <th class="text-right" style="width:100px;">@Html.DisplayNameFor(model => model.Expenses)</th>
                                    @if (access.IncomeStatement_ViewProfit)
                                    {
                                        <th class="text-right" style="width:100px;">@Html.DisplayNameFor(model => model.Profits)</th>
                                    }
                                    <th class="text-right" style="width:100px;">@Html.DisplayNameFor(model => model.ProfitPercent)</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model != null)
                                {
                                    foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>@Html.DisplayFor(modelItem => item.MonthYear)</td>
                                            <td class="text-right">@Html.DisplayFor(modelItem => item.Revenues)</td>
                                            <td class="text-right">@Html.DisplayFor(modelItem => item.Expenses)</td>
                                            @if (access.IncomeStatement_ViewProfit)
                                            {
                                                <td class="text-right">@Html.DisplayFor(modelItem => item.Profits)</td>
                                            }
                                            <td class="text-right">@Html.DisplayFor(modelItem => item.ProfitPercent)</td>
                                            <td></td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                </div>
                
            </div>
            <!-- /form inputs -->
        }

    </div>
    <!-- /content area -->
</div>


<script type="text/javascript">

    $(document).ready(function () {
        setDateRangePicker('FILTER_DateFrom', '@string.Format("{0:yyyy/MM/dd}", DateTime.Today.AddYears(-3))');
        setDateRangePicker('FILTER_DateTo', '@string.Format("{0:yyyy/MM/dd}", DateTime.Today)');

        generateChart();
    });

    function applyLast() {
    }

    function generateChart() {
        var datas = '@ViewBag.Data'.replace(/&quot;/g, '"')
        var label = JSON.parse(datas).Labels;
        var datasetLabels = JSON.parse(datas).DatasetLabels;
        var datasetStackName = JSON.parse(datas).DatasetStackName;
        var datasetDatas = JSON.parse(datas).DatasetDatas;

        var dataSets = [];
        for (var i = 0; i < datasetDatas.length; i++) {
            var dataSet = {
                label: datasetLabels[i],
                backgroundColor: GetRandomColor(),
                borderColor: 'black',
                borderWidth: 1,
                stack: datasetStackName[i],
                data: datasetDatas[i]
            };
            dataSets.push(dataSet);
        }

        var ctx = document.getElementById("myChart").getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: { labels: label, datasets: dataSets },
            options: {
                responsive: true,
                title: { display: false, text: '' },
                legend: { display: true, position: "top" },
                interaction: {
                    intersect: false,
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            footer: function (items) {
                                return 'Total: ' + items.reduce((a, b) => a + b.parsed.y, 0)
                            }
                        }
                    },
                },
                tooltips: {
                    mode: 'label',
                    callbacks: {
                        label: function (tooltipItem, data) {
                            return "Total: xx";
                            var corporation = data.datasets[tooltipItem.datasetIndex].label;
                            var valor = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

                            // Loop through all datasets to get the actual total of the index
                            var total = 0;
                            for (var i = 0; i < data.datasets.length; i++)
                                total += data.datasets[i].data[tooltipItem.index];

                            // If it is not the last dataset, you display it as you usually do
                            if (tooltipItem.datasetIndex != data.datasets.length - 1) {
                                return corporation + " : $" + valor.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
                            } else { // .. else, you display the dataset and the total, using an array
                                return [corporation + " : $" + valor.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'), "Total : $" + total];
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        stacked: true,
                    },
                    y: {
                        stacked: true,
                        ticks: { beginAtZero: true }
                    }
                }
            }
        });
    }

</script>