@model iSpeakWebApp.Models.SaleInvoicesModel
@using iSpeakWebApp.Models

@{
    iSpeakWebApp.Models.UserAccountRolesModel access = iSpeakWebApp.Controllers.UserAccountsController.getUserAccess(Session);
    string ControllerName = "SaleInvoices";
    ViewBag.SelectedNavigationMenu = "Sales";
    ViewBag.Title = "SALE INVOICES";
    ViewBag.Subtitle = "Create";

    List<SaleInvoiceItemsModel> SaleInvoiceItems = (List<SaleInvoiceItemsModel>)ViewData["SaleInvoiceItems"];
}

<div class="content-wrapper">

    <!-- Content area -->
    <div class="content">
        @using (Html.BeginForm("Create", "SaleInvoices", FormMethod.Post, new { id = "targetForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Amount)
            @Html.HiddenFor(model => model.CancelNotes)
            <input type="hidden" id="JsonSaleInvoiceItems" name="JsonSaleInvoiceItems" />
            <!-- Form inputs -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title text-uppercase">@ViewBag.Title</h5>
                </div>
                <div class="card-body">
                    <fieldset class="mb-0">
                        <legend class="text-uppercase font-size-sm font-weight-bold mb-0">@ViewBag.Subtitle</legend>

                        <div class="row mx-0">
                            <div class="row ml-0 mr-2" style="width:100px;">
                                <label class="mb-0">&nbsp;</label>
                                <div class="input-group">
                                    @Html.LabelFor(model => model.Customer_UserAccounts_Id, htmlAttributes: new { @class = "col-form-label required" })
                                </div>
                            </div>

                            <div class="row ml-0 mr-2" style="width:300px;">
                                <label class="mb-0">&nbsp;</label>
                                <div class="input-group">
                                    <select class="form-control" id="Customer_UserAccounts_Id" name="Customer_UserAccounts_Id"></select>
                                    @Html.ValidationMessageFor(model => model.Customer_UserAccounts_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="mr-2">
                                <label class="mb-0">&nbsp;</label>
                                <div><a href="javascript:void(0)" onclick="Action('Create', 'UserAccounts')" class="btn btn-success">ADD<i class="icon-plus22 ml-2"></i></a></div>
                            </div>
                        </div>

                        <div class="mt-3">
                            <nav>
                                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                    <a data-toggle="tab" role="tab" onclick="document.activeElement.blur();" class="nav-item nav-link active" aria-selected="true" id="nav-LessonPackages-tab" href="#nav-LessonPackages" aria-controls="nav-LessonPackages">Lesson Packages</a>
                                    <a data-toggle="tab" role="tab" onclick="document.activeElement.blur();" class="nav-item nav-link" aria-selected="false" id="nav-Inventory-tab" href="#nav-Inventory" aria-controls="nav-Inventory">Inventory</a>
                                    <a data-toggle="tab" role="tab" onclick="document.activeElement.blur();" class="nav-item nav-link" aria-selected="false" id="nav-Services-tab" href="#nav-Services" aria-controls="nav-Services">Services</a>
                                </div>
                            </nav>
                            <div class="tab-content pl-2" id="nav-tabContent">
                                <div role="tabpanel" class="tab-pane fade show active" id="nav-LessonPackages" aria-labelledby="nav-LessonPackages-tab">

                                    <div class="form-group row">
                                        @Html.Label("Lesson Package", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div style="min-width:600px">
                                            @Html.DropDownList("LessonPackages", ViewBag.LessonPackages as SelectList, "Pilih", new { @class = "form-control select2", onchange = "UpdateLessonSessionHours()" })
                                            @Html.ValidationMessage("LessonPackages", "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        @Html.Label("Session Hours", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div style="width:150px">
                                            @Html.Editor("SessionHours", new { htmlAttributes = new { @class = "form-control positivenumericonly", Value = "0" } })
                                            @Html.ValidationMessage("SessionHours", "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        @Html.Label("Travel Cost", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div style="width:150px">
                                            @Html.Editor("TravelCost", new { htmlAttributes = new { @class = "form-control positiveintegeronly", Value = "0", type = "number" } })
                                            @Html.ValidationMessage("TravelCost", "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        @Html.Label("Tutor Travel", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div class="" style="width:150px">
                                            @Html.Editor("TutorTravelCost", new { htmlAttributes = new { @class = "form-control positiveintegeronly", Value = "0", type = "number" } })
                                            @Html.ValidationMessage("TutorTravelCost", "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>

                                <div role="tabpanel" class="tab-pane fade" id="nav-Inventory" aria-labelledby="nav-Inventory-tab">
                                    <div class="form-group row">
                                        @Html.Label("Products", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div class="" style="width:500px">
                                            @Html.DropDownList("Products", ViewBag.Products as SelectList, "Pilih", new { @class = "form-control select2" })
                                            @Html.ValidationMessage("Products", "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div role="tabpanel" class="tab-pane fade" id="nav-Services" aria-labelledby="nav-Services-tab">
                                    <div class="form-group row">
                                        @Html.Label("Services", htmlAttributes: new { @class = "col-form-label required", @style = "width:150px;" })
                                        <div class="" style="width:500px">
                                            @Html.DropDownList("Services", ViewBag.Services as SelectList, "Pilih", new { @class = "form-control select2" })
                                            @Html.ValidationMessage("Services", "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="row ml-0 mr-2" style="width:100px">
                                        <label class="mb-0 required">Qty</label>
                                        <div>
                                            @Html.Editor("Qty", new { htmlAttributes = new { @class = "form-control positiveintegeronly", Value = "1", type = "text" } })
                                        </div>
                                    </div>

                                    <div class="row ml-0 mr-2" style="width:150px">
                                        <label class="mb-0">Discount</label>
                                        <div>
                                            @Html.Editor("Discount", new { htmlAttributes = new { @class = "form-control positiveintegeronly", @style = "width:150px", Value = "0", type = "text" } })
                                        </div>
                                    </div>

                                    <div class="row ml-0 mr-2" style="min-width:300px">
                                        <label class="mb-0">Vouchers</label>
                                        <div class="input-group">
                                            @Html.ListBox("Vouchers", ViewBag.Vouchers as SelectList, new { @class = "form -control select2", @multiple = "multiple" })
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div class="row ml-0 mr-2" style="width:0px">
                                        <label class="mb-0">Notes</label>
                                        <div>
                                            @Html.Editor("ItemNotes", new { htmlAttributes = new { @class = "form-control", @style = "width:570px" } })
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div><a href="javascript:void(0)" onclick="AddItem()" class="btn btn-success">ADD<i class="icon-plus22 ml-2"></i></a></div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-12 row mt-2">
                            <table class="table table-condensed">
                                <thead class="thead-light">
                                    <tr>
                                        <th style="width:60px"></th>
                                        <th>DESCRIPTION</th>
                                        <th style="width:250px" class="text-right">AMOUNT</th>
                                        <th style="width:200px" class="text-right">DISCOUNTS</th>
                                        <th style="width:100px" class="text-right">SUBTOTAL</th>
                                    </tr>
                                </thead>
                                <tbody id="itemList">
                                    @if (SaleInvoiceItems != null)
                                    {
                                        int item_no = 100;
                                        foreach (SaleInvoiceItemsModel invoice in SaleInvoiceItems)
                                        {
                                            item_no += 1;
                                        <tr id="item_@item_no">
                                            <td class="align-top">
                                                <a href="javascript:void(0)" onclick="RemoveItem('item_@item_no')" class="text-danger"><i class="fa fa-2x fa-times"></i></a>
                                            </td>
                                            <td class="align-top">
                                                @invoice.Description
                                                @if (!string.IsNullOrEmpty(invoice.VouchersName))
                                                {
                                                    <br/>@:Voucher: @invoice.VouchersName
                                                } 
                                                @if (!string.IsNullOrEmpty(invoice.Notes))
                                                {
                                                    <br/>@:Notes: @invoice.Notes
                                                } 
                                            </td>
                                            <td class="align-top text-right">
                                                Qty: @string.Format("{0:N0}", invoice.Qty) x @string.Format("{0:N0}", invoice.Price)
                                                @if (invoice.TravelCost > 0)
                                                {
                                                    <br />@:Travel: @string.Format("{0:N0}", invoice.TravelCost) @("Tutor:") @string.Format("{0:N0}", invoice.TutorTravelCost) @(")")
                                                }
                                            </td>
                                            <td class="align-top text-right">
                                                Discount: @string.Format("{0:N0}", -1 * invoice.DiscountAmount)
                                                <br/>Vouchers: @string.Format("{0:N0}", -1 * invoice.VouchersAmount)
                                            </td>
                                            <td class="align-top text-right">
                                                <strong><span class="subtotal">@string.Format("{0:N0}", invoice.TotalAmount)</span></strong>
                                            </td>
                                        </tr>
                                        }
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="3" class="pl-0">
                                            Notes: @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                        </th>
                                        <th colspan="2" class="text-right align-top">
                                            <label class="h4 mb-0">TOTAL:</label> <label id="totalAmount" class="h4 mb-0">0</label>
                                        </th>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                    </fieldset>

                    @if (access.SaleInvoices_Add)
                    {
                        <div>
                            <button type="submit" class="btn btn-primary">Submit<i class="icon-paperplane ml-2"></i></button>
                            <a href="javascript:void(0)" onclick="Action('Index', '@ControllerName')" class="btn btn-warning">Cancel<i class="icon-cross2 ml-2"></i></a>
                        </div>
                    }
                </div>
            </div>
            <!-- /form inputs -->
        }
    </div>
    <!-- /content area -->

</div>

<script type="text/javascript">

    var LessonPackagesModels = @Html.Raw(Json.Encode(ViewBag.LessonPackagesModels));
    var ProductsModels = @Html.Raw(Json.Encode(ViewBag.ProductsModels));
    var ServicesModels = @Html.Raw(Json.Encode(ViewBag.ServicesModels));
    var VouchersModels = @Html.Raw(Json.Encode(ViewBag.VouchersModels));

    $(document).ready(function () {
        if ('@SaleInvoiceItems' != '') {
            //setValue('Customer_UserAccounts_Id', '@Model.Customer_UserAccounts_Id'); //doesn't work because dropdownlist is not loaded yet until user click on it and search for a customer
            setValue('Notes', '@Model.Notes');
            saleinvoiceitems = @Html.Raw(Json.Encode(SaleInvoiceItems));

            //add key id
            $.each(saleinvoiceitems, function (index, item) {
                item_no += 1;
                item.id = getRowId(item_no);
                console.log(item_no + ', id: ' + item.id);
            });

            CalculateTotalAmount();
        }
    });

    function applyLast() {
        AjaxGetDropdownlistData('Customer_UserAccounts_Id', 'GetDropDownListData', 'UserAccounts');
    }

    function UpdateLessonSessionHours() {
        var item = getSelectedLessonPackage();
        setValue('SessionHours', item.SessionHours);
    }

    function getSelectedLessonPackage() { return getSelectedItem('LessonPackages', LessonPackagesModels); }
    function getSelectedProduct() { return getSelectedItem('Products', ProductsModels); }
    function getSelectedService() { return getSelectedItem('Services', ServicesModels); }
    function getSelectedVouchers() { return getSelectedItems('Vouchers', VouchersModels); }

    //ITEM LIST ====================================================================================================================================================

    var saleinvoiceitems = [];
    var item_no = 100;
    function getRowId(no) { return "item_" + no; }
    function AddItem() {
        if ($('#Qty').val() == 0 || $('#Qty').val() == null) {
            showMessage('Please enter Qty', 'Qty');
        } else {
            var description = "";
            var sessionhours = 0;
            var price = 0;
            var subtotal = 0;
            var travelcoststring = "";
            var qty = getValueInt('Qty');
            var discount = getValueInt('Discount');
            var itemnotes = getValueString('ItemNotes');
            var itemnotesstring = "";

            var Products_Id = null;
            var Services_Id = null;
            var LessonPackages_Id = null;
            var TravelCost = 0;
            var TutorTravelCost = 0;

            var voucheramount = 0;
            var voucheridlist = "";
            var vouchernamelist = "";
            var voucherstring = "";
            $.each(getSelectedVouchers(), function (index, item) {
                voucheridlist = appendWithDelimiter(voucheridlist, item.Id, ',');
                vouchernamelist = appendWithDelimiter(vouchernamelist, item.Code+' ('+formatN0(item.Amount)+')', ',');
                voucherstring = vouchernamelist;
                voucheramount += item.Amount;
            });
            if (voucherstring != '')
                voucherstring = '<br/>Voucher: ' + voucherstring;

            if (itemnotes != '')
                itemnotesstring = '<br/>Notes: ' + itemnotes;

            if ($('.tab-content .active').attr('id') == 'nav-LessonPackages') {
                var item = getSelectedLessonPackage();
                if (item == null) {
                    return showMessage('Please select Lesson Package', 'LessonPackages');
                } else {
                    LessonPackages_Id = item.Id;
                    description = '[' + item.Languages_Name + ': ' + item.LessonTypes_Name + '] ' + item.Name;
                    sessionhours = getValueFloat('SessionHours');
                    if (sessionhours > 0)
                        description += ' (' + sessionhours + ' hrs)';
                    price = item.Price;
                    TravelCost = getValueInt('TravelCost');
                    TutorTravelCost = getValueInt('TutorTravelCost');
                    travelcoststring = '<br/>Travel: ' + formatN0(TravelCost) + ' (Tutor: ' + formatN0(TutorTravelCost) + ')';
                    subtotal = (qty * price) + TravelCost - discount - voucheramount;

                    //reset fields
                    setValue('SessionHours', item.SessionHours);
                    setValue('TravelCost', 0);
                    setValue('TutorTravelCost', 0);
                }
            } else if ($('.tab-content .active').attr('id') == 'nav-Inventory') {
                var item = getSelectedProduct();
                if (item == null) {
                    return showMessage('Please select Product', 'Products');
                } else if (item.AvailableQty < qty) {
                    return showMessage('Insufficient quantity. Available: ' + item.AvailableQty, 'Qty');
                } else {
                    Products_Id = item.Id;
                    description = item.Name;
                    price = item.SellPrice;
                    subtotal = (qty * price) - discount - voucheramount;
                }
            } else if ($('.tab-content .active').attr('id') == 'nav-Services') {
                var item = getSelectedService();
                if (item == null) {
                    return showMessage('Please select Service', 'Services');
                } else {
                    Services_Id = item.Id;
                    description = item.Name;
                    price = item.SellPrice;
                    subtotal = (qty * price) - discount - voucheramount;
                }
            }

            item_no += 1;
            var id = getRowId(item_no);
            $('#itemList').append(
                        '<tr id="' + id + '">'
                    +   '   <td class="align-top">'
                    +   '       <a href="javascript:void(0)" onclick="RemoveItem(\'' + id + '\')" class="text-danger"><i class="fa fa-2x fa-times"></i></a>'
                    +   '   </td>'
                    +   '   <td class="align-top">'
                    +   description
                    +   voucherstring
                    +   itemnotesstring
                    +   '   </td>'
                    +   '   <td class="align-top text-right">'
                    +   '       Qty: ' + formatN0(qty) + ' x ' + formatN0(price)
                    +   travelcoststring
                    +   '   </td>'
                    +   '   <td class="align-top text-right">'
                    +   '       Discount: ' + formatN0(-1 * discount)
                    +   '       <br/>Vouchers: ' + formatN0(-1 * voucheramount)
                    +   '   </td>'
                    +   '   <td class="align-top text-right">'
                    +   '       <strong><span class="subtotal">' + formatN0(subtotal) + '</span></strong>'
                    +   '   </td>'
                    +   '</tr>'
                );

            setValue('Qty', 1);
            setValue('Discount', 0);
            resetListbox('Vouchers');
            setValue('ItemNotes', '');

            var saleinvoiceitem = {
                id: id,
                Id: null,
                TotalAmount: subtotal,
                Notes: itemnotes,
                SaleInvoices_Id: emptyGuid(),
                Description: description,
                Qty: qty,
                Price: price,
                DiscountAmount: discount,
                Vouchers: voucheridlist,
                VouchersName: vouchernamelist,
                VouchersAmount: voucheramount,
                Products_Id: Products_Id,
                Services_Id: Services_Id,
                LessonPackages_Id: LessonPackages_Id,
                SessionHours: sessionhours,
                SessionHours_Remaining: sessionhours,
                TravelCost: TravelCost,
                TutorTravelCost: TutorTravelCost
            };
            saleinvoiceitems.push(saleinvoiceitem);

            CalculateTotalAmount(subtotal);
        }
    }

    function RemoveItem(id) {
        var subtotal = 0;
        $.each(saleinvoiceitems, function (index, item) {
            if (item.id == id) {
                subtotal = item.TotalAmount;
                saleinvoiceitems.splice(index, 1);
                return false;
            }
        });

        CalculateTotalAmount();
        $('#' + id).remove();
    }

    function CalculateTotalAmount() {
        var total = 0;
        console.log(saleinvoiceitems.length);
        $.each(saleinvoiceitems, function (index, item) {
            total += item.TotalAmount;
        });

        console.log('TOTAL: ' +total);
        $('#totalAmount').text(formatN0(total));
        $('#Amount').val(total);
    }

    //SUBMISSION ===================================================================================================================================================

    $('#targetForm').submit(function (e) {

        if ($('#Customer_UserAccounts_Id').val() == null) {
            showMessage('Please select customer', 'Customer_UserAccounts_Id');
        } else {
            showLoadingSpinner();

            //remove key id
            $.each(saleinvoiceitems, function (index, item) {
                item.Id = emptyGuid();
                delete item.id;
            });
            $('#JsonSaleInvoiceItems').val(JSON.stringify(saleinvoiceitems));
            return true;
        }

        return false;
    });

    //==============================================================================================================================================================

</script>